on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

name: Create release

jobs:
  get_version:
    name: Get version from Cargo.toml
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ env.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Getting version
        run: |
          echo "VERSION=$(cat Cargo.toml | grep version | sed s/version//g | sed s/=//g | sed s/\"//g | sed s/\ //g | sed -n 1p)" >> $GITHUB_ENV

  make_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: get_version
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.get_version.outputs.project_version }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Test version v${{ env.VERSION }}
          body: |
            Changes in this version
            To be written by maintainer.
          draft: true
          prerelease: true

  build-and-upload:
    name: Create and upload builds
    needs: [ make_release, get_version ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macOS-latest ]
  
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: install libgtk-dev libwebkit2gtk-4.0
        run: sudo apt update && sudo apt install libwebkit2gtk-4.0-dev
        if: contains(matrix.os, 'ubuntu')
      - name: Build release binary
        run: |
          cargo build --release
      - name: win_arch
        run: echo "BIN_ARCH=windows-amd64" >> $GITHUB_ENV
        if: contains(matrix.os, 'windows')
      - name: lin_arch
        run: echo "BIN_ARCH=linux-amd64" >> $GITHUB_ENV
        if: contains(matrix.os, 'ubuntu')
      - name: mac_arch
        run: echo "BIN_ARCH=darwin-amd64" >> $GITHUB_ENV
        if: contains(matrix.os, 'mac')
      - name: Fill variables
        run: |
          echo "BIN_PATH=./target/release/alfis" >> $GITHUB_ENV
          echo "ZIP_NAME=alfis-${{env.BIN_ARCH}}-v${{ needs.get_version.outputs.project_version }}.zip" >> $GITHUB_ENV
      - name: Windows variables
        if: contains(matrix.os, 'windows')
        run: |
          echo "BIN_PATH=target/release/alfis.exe" >> $GITHUB_ENV
          echo "ZIP_NAME=alfis-${{env.BIN_ARCH}}-v${{ needs.get_version.outputs.project_version }}.zip" >> $GITHUB_ENV
      - name: Packaging
        uses: papeloto/action-zip@v1
        with:
          files: ${{ env.BIN_PATH }} alfis.cfg README.md LICENSE
          dest: ${{ env.ZIP_NAME }}
      - name: Upload binary
        id: upload-binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_NAME }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip
