on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

name: Create release

jobs:
  make_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Test version ${{ github.ref }}
          body: |
            Changes in this version
            To be written by maintainer.
          draft: true
          prerelease: true
      - name: Output URL
        run: echo "URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV

  upload:
    name: Create and upload builds
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macOS-latest]
  
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: install libgtk-dev libwebkit2gtk-4.0
        run: sudo apt update && sudo apt install libwebkit2gtk-4.0-dev
        if: contains(matrix.os, 'ubuntu')
      - name: Build release binary
        run: |
          cargo build --release
      - name: Fill variables
        run: |
          echo "BIN_PATH=./target/release/alfis" >> $GITHUB_ENV
          echo "BIN_NAME=alfis_${GITHUB_REF##*/}.bin" >> $GITHUB_ENV
      - name: Windows variables
        if: contains(matrix.os, 'windows')
        run: |
          echo "BIN_PATH=./target/release/alfis.exe" >> $GITHUB_ENV
          echo "BIN_NAME=alfis_${GITHUB_REF##*/}.exe" >> $GITHUB_ENV
      - name: Upload binary
        id: upload-binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.URL }}
          asset_path: ${{ env.BIN_PATH }}
          asset_name: ${{ env.BIN_NAME }}
          asset_content_type: application/octet-stream
